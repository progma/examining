# TODO explain generators and run procedure


##
## Helpers
##
rand = Math.random

# Random sign
sign = ->
  if rand() > 0.5 then 1 else -1

# Sum of elements of array
sum = (arr) ->
  s = 0
  s += a for a in arr
  s

##
## Arbitrary object generators
##

# Generator of random boolean
arbBool = ->
  (if rand() > 0.5 then true else false)

# Generator of random byte
arbByte = ->
  Math.floor rand() * 256

# Generator of random double
arbDouble = ->
  sign() * rand() * Number.MAX_VALUE

# Generator of random double depending on given size
arbSizedDouble = (size) ->
  sign() * rand() * size

# Generator of random integer
arbInt = ->
  sign() * Math.floor(rand() * Number.MAX_VALUE)

# Generator of random integer depending on given size
arbSizedInt = (size) ->
  sign() * Math.floor(rand() * size)

# Generator of random character (0-255)
arbChar = ->
  String.fromCharCode arbByte()

# Generator of array of given length with each element generated by
# given generator.
arbArrayOf = (length,generator) -> (size) ->
  generator(size) for i in [1..length]

arbArrayPrim = (generator,maybeOne) -> (size) ->
  dimension = Math.floor(rand() * size) + maybeOne
  (arbArrayOf dimension, generator)(size)

# Generator for random array of random size
# :: Gen a -> Gen [a]
arbArray = (generator) ->
  arbArrayPrim generator, 0

# Random array of random non-empty size
# :: Gen a -> Gen [a]
arbArray1 = (generator) ->
  arbArrayPrim generator, 1

arbString = (size) ->
  arbArray(arbChar)(size).join ""

# Random real number between #{l} and #{u}
choosePrim = (l, u) ->
  rand() * (u-l) + l

# Random real number between #{l} and #{u}
choosePrimInt = (l, u) ->
  Math.round (choosePrim l, u)

# Create generator of random real number between #{l} and #{u}
arbChoose = (l, u) -> ->
  choosePrim l, u

##
## Helpers for creating custom generators
##

# Creates generator selecting uniformly from given generators (given in Array)
# :: [Gen a] -> Gen a
oneOf = (arr) -> (size) ->
  l = arr.length
  i = choosePrimInt 0, l-1
  arr[i](size)
  # TODO shorter?
  # elements(arr)()(size)

# Creates generator selecting uniformly from given array
# :: [a] -> Gen a
elements = (arr) -> ->
  l = arr.length
  i = Math.round (choosePrim 0, l-1)
  arr[i]

# Creates generator selecting with a weighted random distribution from given
# generators.
#
# Gets an array of pairs (pair is two element array) with first elements a
# frequency and seconds a generators.
#
# :: [(Int, Gen a)] -> Gen a
frequency = (arr) -> (size) ->
  s = sum (el[0] for el in arr)
  bound = choosePrimInt 0, s

  ss = 0
  for el in arr
    ss += el[0]
    if ss >= bound
      return el[1] size

##
## Testing factory
##

computeSize = (args,n,d) ->
  maxSize = args.maxSize
  maxSuccess = args.maxSuccess
  roundNtoD = Math.floor(n / maxSize) * maxSize

  if roundNtoD + maxSize <= maxSuccess ||
       n >= maxSuccess                 ||
       maxSuccess % maxSize == 0
    n % maxSize + d/10
  else
    (n % maxSize)*maxSize / (maxSuccess % maxSize) + d/10


stdArgs =
  maxSuccess  :   100
  maxDiscards :  1000 # maximum number of discarded before giving up
  maxSize     :   100 # size to use for the biggest test cases
  chatty      : false # whether to print anything
  shrinking   : false # TODO

# Run tests of given property.
# Returns either true or array of failing values.
runWith = (args, property) ->
  generators = Array::slice.call(arguments, 2)

  n = 0  # number of successfully ran tests
  d = 0  # number of discarded tests
  while n < args.maxSuccess && d < args.maxDiscards
    size = computeSize args, n, d
    fn = (f) -> f size
    values = generators.map(fn)

    switch property.apply(null, values)
      when true  then n++
      when false
        console.log "*** Failed!  Passed only #{n} tests." if args.chatty
        return values
        # TODO shrinking
      else
        d++

  if d == args.maxDiscards
    console.log "*** Gave up! Passed only #{n} tests." if args.chatty
    return false
  else
    console.log "+++ OK, passed #{args.maxSuccess} tests." if args.chatty
    return true

# Run tests of given property.
# Uses default test arguments.
# Returns either true or failing values.
run = (property) ->
  runWith stdArgs, arguments...

##
## Exports
##
(exports ? this).quickCheck =
  # Arbitrary object generators
  arbBool       : arbBool
  arbByte       : arbByte
  arbDouble     : arbDouble
  arbSizedDouble: arbSizedDouble
  arbInt        : arbInt
  arbSizedInt   : arbSizedInt
  arbChar       : arbChar
  arbArray      : arbArray
  arbArray1     : arbArray1
  arbArrayOf    : arbArrayOf
  arbString     : arbString
  arbChoose     : arbChoose

  # Helpers for creating custom generators
  oneOf         : oneOf
  elements      : elements
  frequency     : frequency

  # Testing factory
  run           : run
  runWith       : runWith
  stdArgs       : stdArgs
